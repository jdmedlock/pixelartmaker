(function () {
'use strict';

class AppWindow {
  /**
   * @description Get the value associated with the named CSS variable
   * @returns {any} cssVarName - CSS variable type
   * @memberof AppWindow
   */
  getCssVariable(cssVarName, varType) {
    const htmlStyles = window.getComputedStyle(document.querySelector('html'));
    const rawValue = htmlStyles.getPropertyValue('--' + cssVarName);
    let varValue = null;
    switch (varType) {
      case 'number':
        varValue = parseInt(rawValue);
        break;
      case 'string':
        varValue = String.toString(rawValue);
        break;
      default: 
        throw new Error(`getCssVariable: unknown value type of ${valueType} /
          encountered`);
    }
    return varValue;
  }
  
  /**
   * @description Set the value of a CSS variable
   * @param {String} cssVarName - Name of the CSS variable to update
   * @param {any} varValue - Value to be assigned to the CSS variable
   * @memberof AppWindow
   */
  setCssVariable(cssVarName, varValue) {
    document.documentElement.style.setProperty('--' + cssVarName, varValue);
  }
}

class Grid {
  /**
   * @description Grid constructor initializes a new Grid given its dimensions.
   * @param {Integer} columnCount - Number of columns in the grid
   * @param {Integer} rowCount - Number of rows in the grid
   * @memberof Grid
   */
  constructor(columnCount, rowCount) {
    // Validate the input parameters
    if (isNaN(columnCount)) {
      return new Error(`Column count is not numeric: ${columnCount}.`);
    }
    if (columnCount < 1 || columnCount > 99) {
      return new Error(`Column count must be between 1 and 99, ${columnCount} is invalid.`);
    }

    if (isNaN(rowCount)) {
      return new Error(`Column count is not numeric: ${rowCount}.`);
    }
    if (rowCount < 1 || rowCount > 99) {
      return new Error(`Column count must be between 1 and 99, ${rowCount} is invalid.`);
    }

    // Populate object variables
    this.columnCount = columnCount;
    this.rowCount = rowCount;
    this.minColumnCount = 1;
    this.maxColumnCount = 99;
    this.minRowCount = 1;
    this.maxRowCount = 99;
    this.defaultGridCellColor = 'rgb(232, 232, 232)'; // Light grey #e8e8e8

    // Create a new grid using the supplied dimensions and nitialize each cell to
    // the default cell color.
    this.grid = new Array(this.rowCount);
    this.clearGrid();
  }
  
/*
  /**
   * @description Return a JSON representation of the design grid
   * @returns {Object} JSON object defining the current design grid
   * @readonly
   * @memberof Grid
   * /
  get grid() {
    return JSON.stringify(this._grid);
  }
  /**
   * @description Populate the design grid from a JSON object
   * @memberof Grid
   * /
  set grid(gridObject) {
    this._grid = JSON.parse(gridObject);
  }
*/

  /**
   * @description Get the current number of columns in the grid.
   * @returns {Integer} - Number of columns in the grid
   * @readonly
   * @memberof Grid
   */
  getColumnCount() {
    return this.columnCount;
  }

  /**
   * @description Update the number of grid columns
   * @param {Integer} count - Column count
   * @memberof Grid
   */
  setColumnCount(count) {
    if (isNaN(count)) {
      return new Error(`Column count is not numeric: ${count}.`);
    }
    if (count < 1 || count > 99) {
      return new Error(`Column count must be between 1 and 99, ${count} is invalid.`);
    }
    this.columnCount = count;
    this.makeGrid();
  }

  /**
   * @description Get the current number of rows in the grid.
   * @returns {Integer} - Number of rows in the grid
   * @readonly
   * @memberof Grid
   */
  getRowCount() {
    return this.rowCount;
  }

  /**
   * @description Update the number of grid rows
   * @param {Integer} count - Row count
   * @memberof Grid
   */
  setRowCount(count) {
    if (isNaN(count)) {
      return new Error(`Row count is not numeric: ${count}.`);
    }
    if (count < 1 || count > 99) {
      return new Error(`Row count must be between 1 and 99, ${count} is invalid.`);
    }
    this.rowCount = count;
    this.makeGrid();
  }

  /**
   * @description Decrement the grid column count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum column count.
   * @memberof Grid
   */
  decrColumnCount() {
    if (this.columnCount === this.minColumnCount) {
      return new Error(`Minimum row limit of ${this.minColumnCount} already reached.`);
    }
    this.columnCount -= 1;
    this.makeGrid();
    return this.columnCount;
  }

  /**
   * @description Increment the grid column count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum column count.
   * @memberof Grid
   */
  incrColumnCount() {
    if (this.columnCount === this.maxColumnCount) {
      return new Error(`Maximum row limit of ${this.maxColumnCount} already reached.`);
    }
    this.columnCount += 1;
    this.makeGrid();
    return this.columnCount;
  }
  
  /**
   * @description Decrement the grid row count
   * @returns {any} The new row count or an Error object If current value is at the
   * minimum row count.
   * @memberof Grid
   */
  decrRowCount() {
    if (this.rowCount === this.minRowCount) {
      return new Error(`Minimum row limit of ${this.maxRowCount} already reached.`);
    }
    this.rowCount -= 1;
    this.makeGrid();
    return this.rowCount;
  }

  /**
   * @description Increment the grid row count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum row count.
   * @memberof Grid
   */
  incrRowCount() {
    if (this.rowCount === this.maxRowCount) {
      return new Error(`Maximum row limit of ${this.maxRowCount} already reached.`);
    }
    this.rowCount += 1;
    this.makeGrid();
    return this.rowCount;
  }

  /**
   * @description Clear the current grid
   * @memberof Grid
   */
  clearGrid() {
    for (let rowNo = 0; rowNo < this.rowCount; rowNo++) {
      this.grid[rowNo] = new Array(this.columnCount);
      for (let columnNo = 0; columnNo < this.columnCount; columnNo++) {
        this.grid[rowNo][columnNo] = this.defaultGridCellColor;
      }
    }
  }

  /**
   * @description Render the grid by generating and adding a new DOM element for
   * each cell in the grid.
   * @memberof Grid
   */
  makeGrid() {
    const gridCellTemplate = '<div class="design-grid-cell"></div>';
    let gridCellElements = '';
    for (let rowNo = 0; rowNo < this.rowCount; rowNo++) {
      for (let columnNo = 0; columnNo < this.columnCount; columnNo++) {
        gridCellElements += gridCellTemplate;
      }
    }
    const appWindow = new AppWindow();
    appWindow.setCssVariable('designGridColumnCount', this.columnCount);
    appWindow.setCssVariable('designGridRowCount', this.rowCount);
    $( ".design-grid" ).empty();
    $( ".design-grid" ).append( gridCellElements );
  }
}

let designGrid = null;
const appWindow = new AppWindow();

$(document).ready(function() {
  console.clear();

  designGrid = new Grid(
    appWindow.getCssVariable('designGridRowCount', 'number'), 
    appWindow.getCssVariable('designGridColumnCount', 'number')
  );
  designGrid.makeGrid();

  // Create an event handlers for the Clear Grid button
  $("#clear-grid-btn").click((event) => {
    designGrid.clearGrid();
  });

  // Create event handlers for column controls
  $('.column-count').change(() => { 
    designGrid.setColumnCount($('#column-count-box').val());
  });

  $(".column-minus").click((event) => {
    try {
      designGrid.decrColumnCount();
      $('#column-count-box').val(designGrid.getColumnCount());
    }
    catch(error) {
      console.log(`Error decrementing column count. error:${error}`);
    }
  });

  $(".column-plus").click((event) => {
    try {
      designGrid.incrColumnCount();
      $('#column-count-box').val(designGrid.getColumnCount());
    }
    catch(error) {
      console.log(`Error incrementing column count. error:${error}`);
    }
  });

  // Create an event handlers for the row controls
  $('.row-count').change(() => { 
    designGrid.setRowCount($('#row-count-box').val());
  });  

  $(".row-minus").click((event) => {
    try {
      designGrid.decrRowCount();
      $('#row-count-box').val(designGrid.getRowCount());
    }
    catch(error) {
      console.log(`Error decrementing row count. error:${error}`);
    }
  });

  $(".row-plus").click((event) => {
    try {
      designGrid.incrRowCount();
      $('#row-count-box').val(designGrid.getRowCount());
    }
    catch(error) {
      console.log(`Error incrementing row count. error:${error}`);
    }
  });

});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xhc3Nlcy9BcHBXaW5kb3cuanMiLCIuLi8uLi9zcmMvY2xhc3Nlcy9HcmlkLmpzIiwiLi4vLi4vc3JjL2hvbWUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQXBwV2luZG93IHtcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgbmFtZWQgQ1NTIHZhcmlhYmxlXG4gICAqIEByZXR1cm5zIHthbnl9IGNzc1Zhck5hbWUgLSBDU1MgdmFyaWFibGUgdHlwZVxuICAgKiBAbWVtYmVyb2YgQXBwV2luZG93XG4gICAqL1xuICBnZXRDc3NWYXJpYWJsZShjc3NWYXJOYW1lLCB2YXJUeXBlKSB7XG4gICAgY29uc3QgaHRtbFN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKSk7XG4gICAgY29uc3QgcmF3VmFsdWUgPSBodG1sU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0tJyArIGNzc1Zhck5hbWUpO1xuICAgIGxldCB2YXJWYWx1ZSA9IG51bGw7XG4gICAgc3dpdGNoICh2YXJUeXBlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICB2YXJWYWx1ZSA9IHBhcnNlSW50KHJhd1ZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICB2YXJWYWx1ZSA9IFN0cmluZy50b1N0cmluZyhyYXdWYWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZ2V0Q3NzVmFyaWFibGU6IHVua25vd24gdmFsdWUgdHlwZSBvZiAke3ZhbHVlVHlwZX0gL1xuICAgICAgICAgIGVuY291bnRlcmVkYCk7XG4gICAgfVxuICAgIHJldHVybiB2YXJWYWx1ZTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBTZXQgdGhlIHZhbHVlIG9mIGEgQ1NTIHZhcmlhYmxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjc3NWYXJOYW1lIC0gTmFtZSBvZiB0aGUgQ1NTIHZhcmlhYmxlIHRvIHVwZGF0ZVxuICAgKiBAcGFyYW0ge2FueX0gdmFyVmFsdWUgLSBWYWx1ZSB0byBiZSBhc3NpZ25lZCB0byB0aGUgQ1NTIHZhcmlhYmxlXG4gICAqIEBtZW1iZXJvZiBBcHBXaW5kb3dcbiAgICovXG4gIHNldENzc1ZhcmlhYmxlKGNzc1Zhck5hbWUsIHZhclZhbHVlKSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLScgKyBjc3NWYXJOYW1lLCB2YXJWYWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwV2luZG93OyIsImltcG9ydCBBcHBXaW5kb3cgZnJvbSAnLi4vY2xhc3Nlcy9BcHBXaW5kb3cnO1xuXG5jbGFzcyBHcmlkIHtcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBHcmlkIGNvbnN0cnVjdG9yIGluaXRpYWxpemVzIGEgbmV3IEdyaWQgZ2l2ZW4gaXRzIGRpbWVuc2lvbnMuXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gY29sdW1uQ291bnQgLSBOdW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgZ3JpZFxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHJvd0NvdW50IC0gTnVtYmVyIG9mIHJvd3MgaW4gdGhlIGdyaWRcbiAgICogQG1lbWJlcm9mIEdyaWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbHVtbkNvdW50LCByb3dDb3VudCkge1xuICAgIC8vIFZhbGlkYXRlIHRoZSBpbnB1dCBwYXJhbWV0ZXJzXG4gICAgaWYgKGlzTmFOKGNvbHVtbkNvdW50KSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgQ29sdW1uIGNvdW50IGlzIG5vdCBudW1lcmljOiAke2NvbHVtbkNvdW50fS5gKTtcbiAgICB9XG4gICAgaWYgKGNvbHVtbkNvdW50IDwgMSB8fCBjb2x1bW5Db3VudCA+IDk5KSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBDb2x1bW4gY291bnQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDk5LCAke2NvbHVtbkNvdW50fSBpcyBpbnZhbGlkLmApO1xuICAgIH1cblxuICAgIGlmIChpc05hTihyb3dDb3VudCkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYENvbHVtbiBjb3VudCBpcyBub3QgbnVtZXJpYzogJHtyb3dDb3VudH0uYCk7XG4gICAgfVxuICAgIGlmIChyb3dDb3VudCA8IDEgfHwgcm93Q291bnQgPiA5OSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgQ29sdW1uIGNvdW50IG11c3QgYmUgYmV0d2VlbiAxIGFuZCA5OSwgJHtyb3dDb3VudH0gaXMgaW52YWxpZC5gKTtcbiAgICB9XG5cbiAgICAvLyBQb3B1bGF0ZSBvYmplY3QgdmFyaWFibGVzXG4gICAgdGhpcy5jb2x1bW5Db3VudCA9IGNvbHVtbkNvdW50O1xuICAgIHRoaXMucm93Q291bnQgPSByb3dDb3VudDtcbiAgICB0aGlzLm1pbkNvbHVtbkNvdW50ID0gMTtcbiAgICB0aGlzLm1heENvbHVtbkNvdW50ID0gOTk7XG4gICAgdGhpcy5taW5Sb3dDb3VudCA9IDE7XG4gICAgdGhpcy5tYXhSb3dDb3VudCA9IDk5O1xuICAgIHRoaXMuZGVmYXVsdEdyaWRDZWxsQ29sb3IgPSAncmdiKDIzMiwgMjMyLCAyMzIpJzsgLy8gTGlnaHQgZ3JleSAjZThlOGU4XG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgZ3JpZCB1c2luZyB0aGUgc3VwcGxpZWQgZGltZW5zaW9ucyBhbmQgbml0aWFsaXplIGVhY2ggY2VsbCB0b1xuICAgIC8vIHRoZSBkZWZhdWx0IGNlbGwgY29sb3IuXG4gICAgdGhpcy5ncmlkID0gbmV3IEFycmF5KHRoaXMucm93Q291bnQpO1xuICAgIHRoaXMuY2xlYXJHcmlkKCk7XG4gIH1cbiAgXG4vKlxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFJldHVybiBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGRlc2lnbiBncmlkXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEpTT04gb2JqZWN0IGRlZmluaW5nIHRoZSBjdXJyZW50IGRlc2lnbiBncmlkXG4gICAqIEByZWFkb25seVxuICAgKiBAbWVtYmVyb2YgR3JpZFxuICAgKiAvXG4gIGdldCBncmlkKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLl9ncmlkKTtcbiAgfVxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFBvcHVsYXRlIHRoZSBkZXNpZ24gZ3JpZCBmcm9tIGEgSlNPTiBvYmplY3RcbiAgICogQG1lbWJlcm9mIEdyaWRcbiAgICogL1xuICBzZXQgZ3JpZChncmlkT2JqZWN0KSB7XG4gICAgdGhpcy5fZ3JpZCA9IEpTT04ucGFyc2UoZ3JpZE9iamVjdCk7XG4gIH1cbiovXG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIGN1cnJlbnQgbnVtYmVyIG9mIGNvbHVtbnMgaW4gdGhlIGdyaWQuXG4gICAqIEByZXR1cm5zIHtJbnRlZ2VyfSAtIE51bWJlciBvZiBjb2x1bW5zIGluIHRoZSBncmlkXG4gICAqIEByZWFkb25seVxuICAgKiBAbWVtYmVyb2YgR3JpZFxuICAgKi9cbiAgZ2V0Q29sdW1uQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1uQ291bnQ7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFVwZGF0ZSB0aGUgbnVtYmVyIG9mIGdyaWQgY29sdW1uc1xuICAgKiBAcGFyYW0ge0ludGVnZXJ9IGNvdW50IC0gQ29sdW1uIGNvdW50XG4gICAqIEBtZW1iZXJvZiBHcmlkXG4gICAqL1xuICBzZXRDb2x1bW5Db3VudChjb3VudCkge1xuICAgIGlmIChpc05hTihjb3VudCkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYENvbHVtbiBjb3VudCBpcyBub3QgbnVtZXJpYzogJHtjb3VudH0uYCk7XG4gICAgfVxuICAgIGlmIChjb3VudCA8IDEgfHwgY291bnQgPiA5OSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgQ29sdW1uIGNvdW50IG11c3QgYmUgYmV0d2VlbiAxIGFuZCA5OSwgJHtjb3VudH0gaXMgaW52YWxpZC5gKTtcbiAgICB9XG4gICAgdGhpcy5jb2x1bW5Db3VudCA9IGNvdW50O1xuICAgIHRoaXMubWFrZUdyaWQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gR2V0IHRoZSBjdXJyZW50IG51bWJlciBvZiByb3dzIGluIHRoZSBncmlkLlxuICAgKiBAcmV0dXJucyB7SW50ZWdlcn0gLSBOdW1iZXIgb2Ygcm93cyBpbiB0aGUgZ3JpZFxuICAgKiBAcmVhZG9ubHlcbiAgICogQG1lbWJlcm9mIEdyaWRcbiAgICovXG4gIGdldFJvd0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnJvd0NvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBVcGRhdGUgdGhlIG51bWJlciBvZiBncmlkIHJvd3NcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSBjb3VudCAtIFJvdyBjb3VudFxuICAgKiBAbWVtYmVyb2YgR3JpZFxuICAgKi9cbiAgc2V0Um93Q291bnQoY291bnQpIHtcbiAgICBpZiAoaXNOYU4oY291bnQpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBSb3cgY291bnQgaXMgbm90IG51bWVyaWM6ICR7Y291bnR9LmApO1xuICAgIH1cbiAgICBpZiAoY291bnQgPCAxIHx8IGNvdW50ID4gOTkpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFJvdyBjb3VudCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgOTksICR7Y291bnR9IGlzIGludmFsaWQuYCk7XG4gICAgfVxuICAgIHRoaXMucm93Q291bnQgPSBjb3VudDtcbiAgICB0aGlzLm1ha2VHcmlkKCk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIERlY3JlbWVudCB0aGUgZ3JpZCBjb2x1bW4gY291bnRcbiAgICogQHJldHVybnMge2FueX0gVGhlIG5ldyBjb2x1bW4gY291bnQgb3IgYW4gRXJyb3Igb2JqZWN0IElmIGN1cnJlbnQgdmFsdWUgaXMgYXQgdGhlXG4gICAqIG1heGltdW0gY29sdW1uIGNvdW50LlxuICAgKiBAbWVtYmVyb2YgR3JpZFxuICAgKi9cbiAgZGVjckNvbHVtbkNvdW50KCkge1xuICAgIGlmICh0aGlzLmNvbHVtbkNvdW50ID09PSB0aGlzLm1pbkNvbHVtbkNvdW50KSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBNaW5pbXVtIHJvdyBsaW1pdCBvZiAke3RoaXMubWluQ29sdW1uQ291bnR9IGFscmVhZHkgcmVhY2hlZC5gKTtcbiAgICB9XG4gICAgdGhpcy5jb2x1bW5Db3VudCAtPSAxO1xuICAgIHRoaXMubWFrZUdyaWQoKTtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5Db3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gSW5jcmVtZW50IHRoZSBncmlkIGNvbHVtbiBjb3VudFxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgbmV3IGNvbHVtbiBjb3VudCBvciBhbiBFcnJvciBvYmplY3QgSWYgY3VycmVudCB2YWx1ZSBpcyBhdCB0aGVcbiAgICogbWF4aW11bSBjb2x1bW4gY291bnQuXG4gICAqIEBtZW1iZXJvZiBHcmlkXG4gICAqL1xuICBpbmNyQ29sdW1uQ291bnQoKSB7XG4gICAgaWYgKHRoaXMuY29sdW1uQ291bnQgPT09IHRoaXMubWF4Q29sdW1uQ291bnQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYE1heGltdW0gcm93IGxpbWl0IG9mICR7dGhpcy5tYXhDb2x1bW5Db3VudH0gYWxyZWFkeSByZWFjaGVkLmApO1xuICAgIH1cbiAgICB0aGlzLmNvbHVtbkNvdW50ICs9IDE7XG4gICAgdGhpcy5tYWtlR3JpZCgpO1xuICAgIHJldHVybiB0aGlzLmNvbHVtbkNvdW50O1xuICB9XG4gIFxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIERlY3JlbWVudCB0aGUgZ3JpZCByb3cgY291bnRcbiAgICogQHJldHVybnMge2FueX0gVGhlIG5ldyByb3cgY291bnQgb3IgYW4gRXJyb3Igb2JqZWN0IElmIGN1cnJlbnQgdmFsdWUgaXMgYXQgdGhlXG4gICAqIG1pbmltdW0gcm93IGNvdW50LlxuICAgKiBAbWVtYmVyb2YgR3JpZFxuICAgKi9cbiAgZGVjclJvd0NvdW50KCkge1xuICAgIGlmICh0aGlzLnJvd0NvdW50ID09PSB0aGlzLm1pblJvd0NvdW50KSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBNaW5pbXVtIHJvdyBsaW1pdCBvZiAke3RoaXMubWF4Um93Q291bnR9IGFscmVhZHkgcmVhY2hlZC5gKTtcbiAgICB9XG4gICAgdGhpcy5yb3dDb3VudCAtPSAxO1xuICAgIHRoaXMubWFrZUdyaWQoKTtcbiAgICByZXR1cm4gdGhpcy5yb3dDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gSW5jcmVtZW50IHRoZSBncmlkIHJvdyBjb3VudFxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgbmV3IGNvbHVtbiBjb3VudCBvciBhbiBFcnJvciBvYmplY3QgSWYgY3VycmVudCB2YWx1ZSBpcyBhdCB0aGVcbiAgICogbWF4aW11bSByb3cgY291bnQuXG4gICAqIEBtZW1iZXJvZiBHcmlkXG4gICAqL1xuICBpbmNyUm93Q291bnQoKSB7XG4gICAgaWYgKHRoaXMucm93Q291bnQgPT09IHRoaXMubWF4Um93Q291bnQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYE1heGltdW0gcm93IGxpbWl0IG9mICR7dGhpcy5tYXhSb3dDb3VudH0gYWxyZWFkeSByZWFjaGVkLmApO1xuICAgIH1cbiAgICB0aGlzLnJvd0NvdW50ICs9IDE7XG4gICAgdGhpcy5tYWtlR3JpZCgpO1xuICAgIHJldHVybiB0aGlzLnJvd0NvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBDbGVhciB0aGUgY3VycmVudCBncmlkXG4gICAqIEBtZW1iZXJvZiBHcmlkXG4gICAqL1xuICBjbGVhckdyaWQoKSB7XG4gICAgZm9yIChsZXQgcm93Tm8gPSAwOyByb3dObyA8IHRoaXMucm93Q291bnQ7IHJvd05vKyspIHtcbiAgICAgIHRoaXMuZ3JpZFtyb3dOb10gPSBuZXcgQXJyYXkodGhpcy5jb2x1bW5Db3VudCk7XG4gICAgICBmb3IgKGxldCBjb2x1bW5ObyA9IDA7IGNvbHVtbk5vIDwgdGhpcy5jb2x1bW5Db3VudDsgY29sdW1uTm8rKykge1xuICAgICAgICB0aGlzLmdyaWRbcm93Tm9dW2NvbHVtbk5vXSA9IHRoaXMuZGVmYXVsdEdyaWRDZWxsQ29sb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBSZW5kZXIgdGhlIGdyaWQgYnkgZ2VuZXJhdGluZyBhbmQgYWRkaW5nIGEgbmV3IERPTSBlbGVtZW50IGZvclxuICAgKiBlYWNoIGNlbGwgaW4gdGhlIGdyaWQuXG4gICAqIEBtZW1iZXJvZiBHcmlkXG4gICAqL1xuICBtYWtlR3JpZCgpIHtcbiAgICBjb25zdCBncmlkQ2VsbFRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkZXNpZ24tZ3JpZC1jZWxsXCI+PC9kaXY+JztcbiAgICBsZXQgZ3JpZENlbGxFbGVtZW50cyA9ICcnO1xuICAgIGZvciAobGV0IHJvd05vID0gMDsgcm93Tm8gPCB0aGlzLnJvd0NvdW50OyByb3dObysrKSB7XG4gICAgICBmb3IgKGxldCBjb2x1bW5ObyA9IDA7IGNvbHVtbk5vIDwgdGhpcy5jb2x1bW5Db3VudDsgY29sdW1uTm8rKykge1xuICAgICAgICBncmlkQ2VsbEVsZW1lbnRzICs9IGdyaWRDZWxsVGVtcGxhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFwcFdpbmRvdyA9IG5ldyBBcHBXaW5kb3coKTtcbiAgICBhcHBXaW5kb3cuc2V0Q3NzVmFyaWFibGUoJ2Rlc2lnbkdyaWRDb2x1bW5Db3VudCcsIHRoaXMuY29sdW1uQ291bnQpO1xuICAgIGFwcFdpbmRvdy5zZXRDc3NWYXJpYWJsZSgnZGVzaWduR3JpZFJvd0NvdW50JywgdGhpcy5yb3dDb3VudCk7XG4gICAgJCggXCIuZGVzaWduLWdyaWRcIiApLmVtcHR5KCk7XG4gICAgJCggXCIuZGVzaWduLWdyaWRcIiApLmFwcGVuZCggZ3JpZENlbGxFbGVtZW50cyApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyaWQ7XG4iLCJpbXBvcnQgQXBwV2luZG93IGZyb20gJy4uL2NsYXNzZXMvQXBwV2luZG93JztcbmltcG9ydCBHcmlkIGZyb20gJy4uL2NsYXNzZXMvR3JpZCc7XG5cbmxldCBkZXNpZ25HcmlkID0gbnVsbDtcbmNvbnN0IGFwcFdpbmRvdyA9IG5ldyBBcHBXaW5kb3coKTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUuY2xlYXIoKTtcblxuICBkZXNpZ25HcmlkID0gbmV3IEdyaWQoXG4gICAgYXBwV2luZG93LmdldENzc1ZhcmlhYmxlKCdkZXNpZ25HcmlkUm93Q291bnQnLCAnbnVtYmVyJyksIFxuICAgIGFwcFdpbmRvdy5nZXRDc3NWYXJpYWJsZSgnZGVzaWduR3JpZENvbHVtbkNvdW50JywgJ251bWJlcicpXG4gICk7XG4gIGRlc2lnbkdyaWQubWFrZUdyaWQoKTtcblxuICAvLyBDcmVhdGUgYW4gZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBDbGVhciBHcmlkIGJ1dHRvblxuICAkKFwiI2NsZWFyLWdyaWQtYnRuXCIpLmNsaWNrKChldmVudCkgPT4ge1xuICAgIGRlc2lnbkdyaWQuY2xlYXJHcmlkKCk7XG4gIH0pO1xuXG4gIC8vIENyZWF0ZSBldmVudCBoYW5kbGVycyBmb3IgY29sdW1uIGNvbnRyb2xzXG4gICQoJy5jb2x1bW4tY291bnQnKS5jaGFuZ2UoKCkgPT4geyBcbiAgICBkZXNpZ25HcmlkLnNldENvbHVtbkNvdW50KCQoJyNjb2x1bW4tY291bnQtYm94JykudmFsKCkpO1xuICB9KTtcblxuICAkKFwiLmNvbHVtbi1taW51c1wiKS5jbGljaygoZXZlbnQpID0+IHtcbiAgICB0cnkge1xuICAgICAgZGVzaWduR3JpZC5kZWNyQ29sdW1uQ291bnQoKTtcbiAgICAgICQoJyNjb2x1bW4tY291bnQtYm94JykudmFsKGRlc2lnbkdyaWQuZ2V0Q29sdW1uQ291bnQoKSk7XG4gICAgfVxuICAgIGNhdGNoKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhgRXJyb3IgZGVjcmVtZW50aW5nIGNvbHVtbiBjb3VudC4gZXJyb3I6JHtlcnJvcn1gKTtcbiAgICB9XG4gIH0pO1xuXG4gICQoXCIuY29sdW1uLXBsdXNcIikuY2xpY2soKGV2ZW50KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGRlc2lnbkdyaWQuaW5jckNvbHVtbkNvdW50KCk7XG4gICAgICAkKCcjY29sdW1uLWNvdW50LWJveCcpLnZhbChkZXNpZ25HcmlkLmdldENvbHVtbkNvdW50KCkpO1xuICAgIH1cbiAgICBjYXRjaChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coYEVycm9yIGluY3JlbWVudGluZyBjb2x1bW4gY291bnQuIGVycm9yOiR7ZXJyb3J9YCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBDcmVhdGUgYW4gZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSByb3cgY29udHJvbHNcbiAgJCgnLnJvdy1jb3VudCcpLmNoYW5nZSgoKSA9PiB7IFxuICAgIGRlc2lnbkdyaWQuc2V0Um93Q291bnQoJCgnI3Jvdy1jb3VudC1ib3gnKS52YWwoKSk7XG4gIH0pOyAgXG5cbiAgJChcIi5yb3ctbWludXNcIikuY2xpY2soKGV2ZW50KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGRlc2lnbkdyaWQuZGVjclJvd0NvdW50KCk7XG4gICAgICAkKCcjcm93LWNvdW50LWJveCcpLnZhbChkZXNpZ25HcmlkLmdldFJvd0NvdW50KCkpO1xuICAgIH1cbiAgICBjYXRjaChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coYEVycm9yIGRlY3JlbWVudGluZyByb3cgY291bnQuIGVycm9yOiR7ZXJyb3J9YCk7XG4gICAgfVxuICB9KTtcblxuICAkKFwiLnJvdy1wbHVzXCIpLmNsaWNrKChldmVudCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBkZXNpZ25HcmlkLmluY3JSb3dDb3VudCgpO1xuICAgICAgJCgnI3Jvdy1jb3VudC1ib3gnKS52YWwoZGVzaWduR3JpZC5nZXRSb3dDb3VudCgpKTtcbiAgICB9XG4gICAgY2F0Y2goZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBpbmNyZW1lbnRpbmcgcm93IGNvdW50LiBlcnJvcjoke2Vycm9yfWApO1xuICAgIH1cbiAgfSk7XG5cbn0pO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sU0FBUyxDQUFDOzs7Ozs7RUFNZCxjQUFjLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRTtJQUNsQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzNFLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDaEUsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLFFBQVEsT0FBTztNQUNiLEtBQUssUUFBUTtRQUNYLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUIsTUFBTTtNQUNSLEtBQUssUUFBUTtRQUNYLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLE1BQU07TUFDUjtRQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxzQ0FBc0MsRUFBRSxTQUFTLENBQUM7cUJBQ3RELENBQUMsQ0FBQyxDQUFDO0tBQ25CO0lBQ0QsT0FBTyxRQUFRLENBQUM7R0FDakI7Ozs7Ozs7O0VBUUQsY0FBYyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUU7SUFDbkMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxV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
