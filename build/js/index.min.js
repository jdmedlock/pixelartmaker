(function () {
'use strict';

class AppWindow {
  /**
   * @description Get the value associated with the named CSS variable
   * @returns {any} cssVarName - CSS variable type
   * @memberof AppWindow
   */
  getCssVariable(cssVarName, varType) {
    const htmlStyles = window.getComputedStyle(document.querySelector('html'));
    const rawValue = htmlStyles.getPropertyValue('--' + cssVarName);
    let varValue = null;
    switch (varType) {
      case 'number':
        varValue = parseInt(rawValue);
        break;
      case 'string':
        varValue = String.toString(rawValue);
        break;
      default: 
        throw new Error(`getCssVariable: unknown value type of ${valueType} /
          encountered`);
    }
    return varValue;
  }
  
  /**
   * @description Set the value of a CSS variable
   * @param {String} cssVarName - Name of the CSS variable to update
   * @param {any} varValue - Value to be assigned to the CSS variable
   * @memberof AppWindow
   */
  setCssVariable(cssVarName, varValue) {
    document.documentElement.style.setProperty('--' + cssVarName, varValue);
  }
}

class Grid {
  /**
   * @description Grid constructor initializes a new Grid given its dimensions.
   * @param {Integer} columnCount - Number of columns in the grid
   * @param {Integer} rowCount - Number of rows in the grid
   * @memberof Grid
   */
  constructor(columnCount, rowCount) {
    // Validate the input parameters
    if (isNaN(columnCount)) {
      return new Error(`Column count is not numeric: ${columnCount}.`);
    }
    if (columnCount < 1 || columnCount > 99) {
      return new Error(`Column count must be between 1 and 99, ${columnCount} is invalid.`);
    }

    if (isNaN(rowCount)) {
      return new Error(`Column count is not numeric: ${rowCount}.`);
    }
    if (rowCount < 1 || rowCount > 99) {
      return new Error(`Column count must be between 1 and 99, ${rowCount} is invalid.`);
    }

    // Populate object variables
    this.columnCount = columnCount;
    this.rowCount = rowCount;
    this.minColumnCount = 1;
    this.maxColumnCount = 99;
    this.minRowCount = 1;
    this.maxRowCount = 99;
    this.defaultGridCellColor = 'rgb(232, 232, 232)'; // Light grey #e8e8e8

    // Create a new grid using the supplied dimensions and nitialize each cell to
    // the default cell color.
    this.grid = new Array(this.rowCount);
    this.clearGrid();
  }
  
/*
  /**
   * @description Return a JSON representation of the design grid
   * @returns {Object} JSON object defining the current design grid
   * @readonly
   * @memberof Grid
   * /
  get grid() {
    return JSON.stringify(this._grid);
  }
  /**
   * @description Populate the design grid from a JSON object
   * @memberof Grid
   * /
  set grid(gridObject) {
    this._grid = JSON.parse(gridObject);
  }
*/

  /**
   * @description Get the current number of columns in the grid.
   * @returns {Integer} - Number of columns in the grid
   * @readonly
   * @memberof Grid
   */
  getColumnCount() {
    return this.columnCount;
  }

  /**
   * @description Update the number of grid columns
   * @param {Integer} count - Column count
   * @memberof Grid
   */
  setColumnCount(count) {
    if (isNaN(count)) {
      return new Error(`Column count is not numeric: ${count}.`);
    }
    if (count < 1 || count > 99) {
      return new Error(`Column count must be between 1 and 99, ${count} is invalid.`);
    }
    this.columnCount = count;
    this.makeGrid();
  }

  /**
   * @description Get the current number of rows in the grid.
   * @returns {Integer} - Number of rows in the grid
   * @readonly
   * @memberof Grid
   */
  getRowCount() {
    return this.rowCount;
  }

  /**
   * @description Update the number of grid rows
   * @param {Integer} count - Row count
   * @memberof Grid
   */
  setRowCount(count) {
    if (isNaN(count)) {
      return new Error(`Row count is not numeric: ${count}.`);
    }
    if (count < 1 || count > 99) {
      return new Error(`Row count must be between 1 and 99, ${count} is invalid.`);
    }
    this.rowCount = count;
    this.makeGrid();
  }

  /**
   * @description Decrement the grid column count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum column count.
   * @memberof Grid
   */
  decrColumnCount() {
    if (this.columnCount === this.minColumnCount) {
      return new Error(`Minimum row limit of ${this.minColumnCount} already reached.`);
    }
    this.columnCount -= 1;
    this.makeGrid();
    return this.columnCount;
  }

  /**
   * @description Increment the grid column count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum column count.
   * @memberof Grid
   */
  incrColumnCount() {
    if (this.columnCount === this.maxColumnCount) {
      return new Error(`Maximum row limit of ${this.maxColumnCount} already reached.`);
    }
    this.columnCount += 1;
    this.makeGrid();
    return this.columnCount;
  }
  
  /**
   * @description Decrement the grid row count
   * @returns {any} The new row count or an Error object If current value is at the
   * minimum row count.
   * @memberof Grid
   */
  decrRowCount() {
    if (this.rowCount === this.minRowCount) {
      return new Error(`Minimum row limit of ${this.maxRowCount} already reached.`);
    }
    this.rowCount -= 1;
    this.makeGrid();
    return this.rowCount;
  }

  /**
   * @description Increment the grid row count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum row count.
   * @memberof Grid
   */
  incrRowCount() {
    if (this.rowCount === this.maxRowCount) {
      return new Error(`Maximum row limit of ${this.maxRowCount} already reached.`);
    }
    this.rowCount += 1;
    this.makeGrid();
    return this.rowCount;
  }

  /**
   * @description Clear the current grid
   * @memberof Grid
   */
  clearGrid() {
    for (let rowNo = 0; rowNo < this.rowCount; rowNo++) {
      this.grid[rowNo] = new Array(this.columnCount);
      for (let columnNo = 0; columnNo < this.columnCount; columnNo++) {
        this.grid[rowNo][columnNo] = this.defaultGridCellColor;
      }
    }
    this.makeGrid();
  }

  /**
   * @description Render the grid by generating and adding a new DOM element for
   * each cell in the grid.
   * @memberof Grid
   */
  makeGrid() {
    const gridCellTemplate = '<div class="design-grid-cell"></div>';
    let gridCellElements = '';
    for (let rowNo = 0; rowNo < this.rowCount; rowNo++) {
      for (let columnNo = 0; columnNo < this.columnCount; columnNo++) {
        gridCellElements += gridCellTemplate;
      }
    }
    const appWindow = new AppWindow();
    appWindow.setCssVariable('designGridColumnCount', this.columnCount);
    appWindow.setCssVariable('designGridRowCount', this.rowCount);
    $( ".design-grid" ).empty();
    $( ".design-grid" ).append( gridCellElements );
  }
}

class Palette {
  /**
   * @description Palette constructor initializes a new Palette object
   * @memberof Grid
   */
  constructor(columnCount, rowCount) {
    this.defaultColor = 'rgb(0, 0, 232)';
    this.newColor = this.defaultColor;
    this.currentColor = this.defaultColor;
    this.newColorShades = this.createShades(this.newColor);
    this.currentColorShades = this.createShades(this.currentColor);
    this.recentColors = this.createShades(this.currentColor);
  }
  /**
   * @description Generate an array of five shades of the provided color using equal
   * amounts of power to all of the light sources.
   * @param {any} color A string formatted as 'rgb(nnn,nnn,nnn)' where 'nnn' is a
   * value from 0-255 representing the red, green, and blue color value.
   * @returns {[String]} Array of five shade values based on the provided color
   * @memberof Palette
   */
  createShades(color) {
    const noOfShades = 5;
    const step = (255 / noOfShades) -1;
    let shades = [];
    let colors = [];

    for (let i = 0; i < noOfShades; i++) {
      if (i === 0) {
        colors = color.split('rgb(')[1].split(')')[0].split(',');
      } else {
        colors = shades[i-1].split('rgb(')[1].split(')')[0].split(',');
      }
      shades.push(`rgb(${parseInt(colors[0],10)+step},${parseInt(colors[1],10)+step},${parseInt(colors[2],10)+step})`);
    }
    return shades.reverse();
  }

  /**
   * @description Retrieve and array containing the shades of the current color
   * @returns  {[String]} Array of five shade values based on the provided color
   * @memberof Palette
   */
  getShades() {
    return this.currentColorShades;
  }

}

let designGrid = null;
let colorPalette = null;
const appWindow = new AppWindow();

$(document).ready(function() {
  console.clear();

  colorPalette = new Palette();
  const shades = colorPalette.getShades();
  $("#recent-color-1").css('background-color',shades[0]);
  $("#recent-color-2").css('background-color',shades[1]);
  $("#recent-color-3").css('background-color',shades[2]);
  $("#recent-color-4").css('background-color',shades[3]);
  $("#recent-color-5").css('background-color',shades[4]);

  designGrid = new Grid(
    appWindow.getCssVariable('designGridRowCount', 'number'), 
    appWindow.getCssVariable('designGridColumnCount', 'number')
  );
  designGrid.makeGrid();

  // Create a delegated event handler on the Design Grid.
  $( ".design-grid" ).on( "click", ".design-grid-cell", function() {
    // TODO: Use current color from Palette object
    $(this).css('background-color','#EE178C');
  });

  // Create an event handler for the Clear Grid button
  $("#clear-grid-btn").click((event) => {
    designGrid.clearGrid();
  });

  // Create event handlers for column controls
  $('.column-count').change(() => { 
    designGrid.setColumnCount($('#column-count-box').val());
  });

  $(".column-minus").click((event) => {
    try {
      designGrid.decrColumnCount();
      $('#column-count-box').val(designGrid.getColumnCount());
    }
    catch(error) {
      console.log(`Error decrementing column count. error:${error}`);
    }
  });

  $(".column-plus").click((event) => {
    try {
      designGrid.incrColumnCount();
      $('#column-count-box').val(designGrid.getColumnCount());
    }
    catch(error) {
      console.log(`Error incrementing column count. error:${error}`);
    }
  });

  // Create an event handlers for the row controls
  $('.row-count').change(() => { 
    designGrid.setRowCount($('#row-count-box').val());
  });  

  $(".row-minus").click((event) => {
    try {
      designGrid.decrRowCount();
      $('#row-count-box').val(designGrid.getRowCount());
    }
    catch(error) {
      console.log(`Error decrementing row count. error:${error}`);
    }
  });

  $(".row-plus").click((event) => {
    try {
      designGrid.incrRowCount();
      $('#row-count-box').val(designGrid.getRowCount());
    }
    catch(error) {
      console.log(`Error incrementing row count. error:${error}`);
    }
  });

});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
