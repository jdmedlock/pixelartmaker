(function () {
'use strict';

class AppWindow {
  /**
   * @description Get the value associated with the named CSS variable
   * @returns {any} cssVarName - CSS variable type
   * @memberof AppWindow
   */
  getCssVariable(cssVarName, varType) {
    const htmlStyles = window.getComputedStyle(document.querySelector('html'));
    const rawValue = htmlStyles.getPropertyValue('--' + cssVarName);
    let varValue = null;
    switch (varType) {
      case 'number':
        varValue = parseInt(rawValue);
        break;
      case 'string':
        varValue = String.toString(rawValue);
        break;
      default: 
        throw new Error(`getCssVariable: unknown value type of ${valueType} /
          encountered`);
    }
    return varValue;
  }
  
  /**
   * @description Set the value of a CSS variable
   * @param {String} cssVarName - Name of the CSS variable to update
   * @param {any} varValue - Value to be assigned to the CSS variable
   * @memberof AppWindow
   */
  setCssVariable(cssVarName, varValue) {
    document.documentElement.style.setProperty('--' + cssVarName, varValue);
  }
}

class Grid {
  /**
   * @description Grid constructor initializes a new Grid given its dimensions.
   * @param {Integer} columnCount - Number of columns in the grid
   * @param {Integer} rowCount - Number of rows in the grid
   * @memberof Grid
   */
  constructor(columnCount, rowCount) {
    // Validate the input parameters
    if (isNaN(columnCount)) {
      return new Error(`Column count is not numeric: ${columnCount}.`);
    }
    if (columnCount < 1 || columnCount > 99) {
      return new Error(`Column count must be between 1 and 99, ${columnCount} is invalid.`);
    }

    if (isNaN(rowCount)) {
      return new Error(`Column count is not numeric: ${rowCount}.`);
    }
    if (rowCount < 1 || rowCount > 99) {
      return new Error(`Column count must be between 1 and 99, ${rowCount} is invalid.`);
    }

    // Populate object variables
    this.columnCount = columnCount;
    this.rowCount = rowCount;
    this.minColumnCount = 1;
    this.maxColumnCount = 99;
    this.minRowCount = 1;
    this.maxRowCount = 99;
    this.defaultGridCellColor = 'rgb(232, 232, 232)'; // Light grey #e8e8e8

    // Create a new grid using the supplied dimensions and nitialize each cell to
    // the default cell color.
    this.grid = new Array(this.rowCount);
    this.clearGrid();
  }
  
/*
  /**
   * @description Return a JSON representation of the design grid
   * @returns {Object} JSON object defining the current design grid
   * @readonly
   * @memberof Grid
   * /
  get grid() {
    return JSON.stringify(this._grid);
  }
  /**
   * @description Populate the design grid from a JSON object
   * @memberof Grid
   * /
  set grid(gridObject) {
    this._grid = JSON.parse(gridObject);
  }
*/

  /**
   * @description Get the current number of columns in the grid.
   * @returns {Integer} - Number of columns in the grid
   * @readonly
   * @memberof Grid
   */
  getColumnCount() {
    return this.columnCount;
  }

  /**
   * @description Update the number of grid columns
   * @param {Integer} count - Column count
   * @memberof Grid
   */
  setColumnCount(count) {
    if (isNaN(count)) {
      return new Error(`Column count is not numeric: ${count}.`);
    }
    if (count < 1 || count > 99) {
      return new Error(`Column count must be between 1 and 99, ${count} is invalid.`);
    }
    this._columnCount = count;
    this.makeGrid();
  }

  /**
   * @description Get the current number of rows in the grid.
   * @returns {Integer} - Number of rows in the grid
   * @readonly
   * @memberof Grid
   */
  getRowCount() {
    return this.rowCount;
  }

  /**
   * @description Update the number of grid rows
   * @param {Integer} count - Row count
   * @memberof Grid
   */
  setRowCount(count) {
    if (isNaN(count)) {
      return new Error(`Row count is not numeric: ${count}.`);
    }
    if (count < 1 || count > 99) {
      return new Error(`Row count must be between 1 and 99, ${count} is invalid.`);
    }
    this._rowCount = count;
    this.makeGrid();
  }

  /**
   * @description Decrement the grid column count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum column count.
   * @memberof Grid
   */
  decrColumnCount() {
    if (this.columnCount === this.minColumnCount) {
      return new Error(`Minimum row limit of ${this.minColumnCount} already reached.`);
    }
    this.columnCount -= 1;
    this.makeGrid();
    return this.columnCount;
  }

  /**
   * @description Increment the grid column count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum column count.
   * @memberof Grid
   */
  incrColumnCount() {
    if (this.columnCount === this.maxColumnCount) {
      return new Error(`Maximum row limit of ${this.maxColumnCount} already reached.`);
    }
    this.columnCount += 1;
    this.makeGrid();
    return this.columnCount;
  }
  
  /**
   * @description Decrement the grid row count
   * @returns {any} The new row count or an Error object If current value is at the
   * minimum row count.
   * @memberof Grid
   */
  decrRowCount() {
    if (this.rowCount === this.minRowCount) {
      return new Error(`Minimum row limit of ${this.maxRowCount} already reached.`);
    }
    this.rowCount -= 1;
    this.makeGrid();
    return this.rowCount;
  }

  /**
   * @description Increment the grid row count
   * @returns {any} The new column count or an Error object If current value is at the
   * maximum row count.
   * @memberof Grid
   */
  incrRowCount() {
    if (this.rowCount === this.maxRowCount) {
      return new Error(`Maximum row limit of ${this.maxRowCount} already reached.`);
    }
    this.rowCount += 1;
    this.makeGrid();
    return this.rowCount;
  }

  /**
   * @description Clear the current grid
   * @memberof Grid
   */
  clearGrid() {
    for (let rowNo = 0; rowNo < this.rowCount; rowNo++) {
      this.grid[rowNo] = new Array(this.columnCount);
      for (let columnNo = 0; columnNo < this.columnCount; columnNo++) {
        this.grid[rowNo][columnNo] = this.defaultGridCellColor;
      }
    }
  }

  /**
   * @description Render the grid by generating and adding a new DOM element for
   * each cell in the grid.
   * @memberof Grid
   */
  makeGrid() {
    console.log(`Current rowCount:${this.rowCount} columnCount:${this.columnCount}`);
    const gridCellTemplate = '<div class="design-grid-cell"></div>';
    let gridCellElements = '';
    for (let rowNo = 0; rowNo < this.rowCount; rowNo++) {
      for (let columnNo = 0; columnNo < this.columnCount; columnNo++) {
        gridCellElements += gridCellTemplate;
      }
    }
    // TODO: Research making AppWindow functions static
    const appWindow = new AppWindow();
    appWindow.setCssVariable('designGridColumnCount', this.columnCount);
    appWindow.setCssVariable('designGridRowCount', this.rowCount);
    $( ".design-grid" ).empty();
    $( ".design-grid" ).append( gridCellElements );
  }
}

let designGrid = null;
const appWindow = new AppWindow();

$(document).ready(function() {
  console.clear();

  designGrid = new Grid(
    appWindow.getCssVariable('designGridRowCount', 'number'), 
    appWindow.getCssVariable('designGridColumnCount', 'number')
  );
  designGrid.makeGrid();

  // Create an event handler for the Clear Grid button
  $("#clear-grid-btn").click((event) => {
    designGrid.clearGrid();
  });

  // Create an input event handler for the column count
  $('.column-count').change(() => { 
    console.log('Column count changed');
  });

  // Create a button handler decrement column event
  $(".column-minus").click((event) => {
    try {
      designGrid.decrColumnCount();
      $('#column-count-box').val(designGrid.getColumnCount());
    }
    catch(error) {
      console.log(`Error decrementing column count. error:${error}`);
    }
  });

  // Create a button handler increment column event
  $(".column-plus").click((event) => {
    try {
      designGrid.incrColumnCount();
      $('#column-count-box').val(designGrid.getColumnCount());
    }
    catch(error) {
      console.log(`Error incrementing column count. error:${error}`);
    }
  });

  // Create an input event handler for the row count
  $('.row-count').change(() => { 
    // do something
  });  

  // Create a button handler decrement row event
  $(".row-minus").click((event) => {
      try {
        designGrid.decrRowCount();
        $('#row-count-box').val(designGrid.getRowCount());
      }
      catch(error) {
        console.log(`Error decrementing row count. error:${error}`);
      }
    });

  // Create a button handler increment row event
  $(".row-plus").click((event) => {
    try {
      designGrid.incrRowCount();
      $('#row-count-box').val(designGrid.getRowCount());
    }
    catch(error) {
      console.log(`Error incrementing row count. error:${error}`);
    }
  });

});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
